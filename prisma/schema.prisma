generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  verified    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sets        Set[]
  leitnerSets LeitnerSet[]
}

model Set {
  id          String       @id @default(uuid())
  authorId    String
  title       String
  description String?      @db.Text
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  private     Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cards       Card[]
  leitnerSets LeitnerSet[]

  @@index([authorId])
}

model CardMedia {
  id        String   @id @default(uuid())
  cardId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([cardId])
}

model Card {
  id         String      @id @default(uuid())
  setId      String
  index      Int
  term       String      @db.Text
  definition String      @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  set        Set         @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media      CardMedia[]

  @@index([setId])
}

model LeitnerSet {
  id           String        @id @default(uuid())
  setId        String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  set          Set           @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leitnerCards LeitnerCard[]

  @@index([setId])
  @@index([userId])
}

model LeitnerCard {
  id           String     @id @default(uuid())
  leitnerSetId String
  index        Int
  box          Int        @default(1)
  learnt       Boolean    @default(false)
  due          DateTime   @default(now())
  term         String     @db.Text
  definition   String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  leitnerSet   LeitnerSet @relation(fields: [leitnerSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([leitnerSetId])
}
