generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String                @id @default(uuid())
  username            String                @unique
  email               String                @unique
  password            String
  verified            Boolean               @default(false)
  timezone            String                @default("Etc/UTC")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sets                Set[]
  apiKeys             ApiKey[]
  folders             Folder[]
  SpacedRepetitionSet SpacedRepetitionSet[]
}

model Set {
  id                  String                @id @default(uuid())
  authorId            String
  title               String
  description         String?               @db.Text
  author              User                  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  private             Boolean
  folders             Folder[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  cards               Card[]
  SpacedRepetitionSet SpacedRepetitionSet[]

  @@index([authorId])
}

model Folder {
  id             String   @id @default(uuid())
  parentFolderId String?
  authorId       String
  name           String
  description    String?  @db.Text
  color          String   @db.VarChar(7)
  private        Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sets           Set[]
  author         User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentFolder   Folder?  @relation("FolderNesting", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subfolders     Folder[] @relation("FolderNesting")

  @@index([parentFolderId, authorId])
}

model CardMedia {
  id        String   @id @default(uuid())
  cardId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([cardId])
}

model Card {
  id                   String                 @id @default(uuid())
  setId                String
  index                Int
  term                 String                 @db.Text
  definition           String                 @db.Text
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  set                  Set                    @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media                CardMedia[]
  SpacedRepetitionCard SpacedRepetitionCard[]

  @@index([setId])
}

model SpacedRepetitionSet {
  id                    String                 @id @default(uuid())
  setId                 String
  userId                String
  desiredRetention      Float
  maximumInterval       Int
  maximumNewCardsPerDay Int
  w                     Json
  answerWith            Side                   @default(TERM)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  set                   Set                    @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spacedRepetitionCards SpacedRepetitionCard[]

  @@unique([setId, userId])
  @@index([setId])
  @@index([userId])
}

model SpacedRepetitionCard {
  id                          String                       @id @default(uuid())
  spacedRepetitionSetId       String
  cardId                      String
  stability                   Float                        @default(0)
  difficulty                  Float                        @default(0)
  due                         DateTime                     @default("1970-01-01T00:00:01.000Z")
  repetitions                 Int                          @default(0)
  lapses                      Int                          @default(0)
  state                       SpacedRepetitionCardState    @default(NEW)
  lastReviewed                DateTime                     @default("1970-01-01T00:00:01.000Z")
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  card                        Card                         @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spacedRepetitionCardReviews SpacedRepetitionCardReview[]
  spacedRepetitionSet         SpacedRepetitionSet          @relation(fields: [spacedRepetitionSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([spacedRepetitionSetId, cardId])
  @@index([spacedRepetitionSetId])
}

model SpacedRepetitionCardReview {
  id                        String                           @id @default(uuid())
  spacedRepetitionCardId    String
  recallTime                Int
  rating                    SpacedRepetitionCardReviewRating
  state                     SpacedRepetitionCardState
  previousDue               DateTime
  previousStability         Float
  previousDifficulty        Float
  daysSinceLastReview       Int
  daysBetweenLastTwoReviews Int
  daysUntilNextReview       Int
  time                      DateTime                         @default(now())
  spacedRepetitionCard      SpacedRepetitionCard             @relation(fields: [spacedRepetitionCardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([spacedRepetitionCardId])
}

model ApiKey {
  id     String @id @default(uuid())
  userId String
  name   String
  apiKey String @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

enum Side {
  TERM
  DEFINITION
}

enum SpacedRepetitionCardState {
  NEW
  LEARNING
  REVIEW
  RELEARNING
}

enum SpacedRepetitionCardReviewRating {
  MANUAL
  AGAIN
  HARD
  GOOD
  EASY
}
